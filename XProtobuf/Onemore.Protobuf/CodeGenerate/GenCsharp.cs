using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


namespace Onemore.Protobuf.CodeGenerate
{
    /// <summary>
    /// just code it for fun, can use Google.Protoc compile the auto genetated proto file
    /// </summary>
    public static class GenCSharp
    {
        public static string GenCode(MessageManager manager, string file = null)
        {
            _buffer.Clear();
            GenMessageManager(manager);
            var content = _buffer.ToString();
            if (string.IsNullOrEmpty(file) == false)
            {
                File.WriteAllText(file, content, _utf8);
            }
            return content;
        }


        static Encoding _utf8 = new UTF8Encoding(true, true);// utf-8 with bom
        static StringBuilder _buffer = new StringBuilder();
        private static void AppendFormat(string format, params object[] args)
        {
            if (args.Length > 0)
            {
                _buffer.AppendFormat(format, args);
            }
            else
            {
                _buffer.Append(format);
            }

        }
        private static void Append(int indent, string format, params object[] args)
        {
            _buffer.Append(' ', indent * 4);
            if (args.Length > 0) // WTF
            {
                _buffer.AppendFormat(format, args);
            }
            else
            {
                _buffer.Append(format);
            }
        }
        private static void AppendLine(int indent, string format, params object[] args)
        {
            Append(indent, format, args);
            AppendLine();
        }
        private static void AppendLine()
        {
            _buffer.AppendLine();
        }

        static void GenMessageManager(MessageManager manager)
        {
            AppendLine(0, @"// This Code was generated by Onemore.Protobuf. Do not edit it!");
            AppendLine();
            AppendLine(0, @"using System.Collections.Generic;");
            AppendLine();
            AppendLine(0, @"using InputStream = Onemore.Protobuf.InputStream;");
            AppendLine(0, @"using OutputStream = Onemore.Protobuf.OutputStream;");
            AppendLine(0, @"using WireFormat = Onemore.Protobuf.WireFormat;");
            AppendLine(0, @"using WireType = Onemore.Protobuf.WireFormat.WireType;");
            AppendLine();
            AppendLine(0, "namespace {0} {{", manager.m_namespace);
            foreach (var penum in manager.m_enums.Values)
            {
                GenEnum(penum);
                AppendLine();
            }
            foreach (var message in manager.m_messages.Values)
            {
                GenMessage(message);
                AppendLine();
            }
            AppendLine(0, "}");
        }

        static void GenEnum(PEnum penum)
        {
            AppendLine(1, "public enum {0}", penum.m_name);
            AppendLine(1, "{");
            foreach (var item in penum.m_items.OrderBy(item_ => item_.Value))
            {
                AppendLine(2, "{0} = {1};", item.Key, item.Value);
            }
            AppendLine(1, "}");
        }

        static void GenMessage(MessageInfo message)
        {
            AppendLine(1, "public sealed class {0}", message.m_name);
            AppendLine(1, "{");
            PreGenField(message);
            foreach (var field in cur_gen_fields)
            {
                DefineField(field);
                AppendLine();
            }
            GenMessageWriteTo(message);
            AppendLine();
            GenMessageReadFrom(message);
            AppendLine();
            GenMessageGetSize(message);
            AppendLine();
            GenMessageCalculateSize(message);
            AppendLine(1, "}");
        }

        class FieldInfoForGen
        {
            public string name_get;
            public string name_get_has_set;

            public string name_define;
            public string name_has_set;
            public string name_size;
            public string name_packed_size;
            public string name_type;

            public FieldInfo field_info;

            public void GenWriteCode(int indent, string write_name = null)
            {
                if (write_name == null) write_name = name_define;
                switch(field_info.m_type)
                {
                    case FieldFormat.FieldType.InValid:
                        throw new NotSupportedException();
                    case FieldFormat.FieldType.Message:
                        AppendLine(indent, "{0}.WriteTo(output);", write_name);
                        break;
                    default:
                        AppendLine(indent, "output.Write{1}({0});", write_name, Enum.GetName(typeof(FieldFormat.FieldType), field_info.m_type));
                        break;
                }
            }

            public void GenReadCode(int indent, string read_name = null)
            {
                bool need_new = read_name != null;
                if (read_name == null) read_name = name_get;
                switch (field_info.m_type)
                {
                    case FieldFormat.FieldType.InValid:
                        throw new NotSupportedException();
                    case FieldFormat.FieldType.Message:
                        if(need_new)
                        {
                            AppendLine(indent, "var {0} = new {1}();", read_name, name_type);
                        }
                        AppendLine(indent, "{0}.ReadFrom(_input);", read_name);
                        break;
                    default:
                        if(need_new)
                        {
                            AppendLine(indent, "var {0} = _input.Read{1}();", read_name, Enum.GetName(typeof(FieldFormat.FieldType), field_info.m_type));
                        }
                        else
                        {
                            AppendLine(indent, "{0} = _input.Read{1}();", read_name, Enum.GetName(typeof(FieldFormat.FieldType), field_info.m_type));
                        }
                        break;
                }
            }

            public void GenCalculateCodeSnippet(string var_name)
            {
                switch (field_info.m_type)
                {
                    case FieldFormat.FieldType.InValid:
                        throw new NotSupportedException();
                    case FieldFormat.FieldType.Message:
                        AppendFormat("{0}.CalculateSize();", var_name);
                        break;
                    default:
                        AppendFormat("OutputStream.Compute{0}Size({1});",
                            Enum.GetName(typeof(FieldFormat.FieldType), field_info.m_type),
                            var_name);
                        break;
                }
            }
        }
        static List<FieldInfoForGen> cur_gen_fields = new List<FieldInfoForGen>();

        static void PreGenField(MessageInfo message)
        {
            cur_gen_fields.Clear();
            foreach (var field in message.m_fields.Values.OrderBy(_ => _.m_index))
            {
                FieldInfoForGen gen_field = new FieldInfoForGen();
                gen_field.field_info = field;
                gen_field.name_get = field.m_name;
                gen_field.name_get_has_set = field.m_name + "Specified";

                gen_field.name_define = "__" + gen_field.name_get;
                gen_field.name_has_set = "__" + gen_field.name_get_has_set;
                gen_field.name_size = "__" + gen_field.name_get + "__size";
                gen_field.name_packed_size = "__" + gen_field.name_get + "__packed_size";
                if(field.m_is_array)
                {
                    gen_field.name_type = string.Format("List<{0}>", GetFieldTypeName(field));
                }
                else
                {
                    gen_field.name_type = GetFieldTypeName(field);
                }
                cur_gen_fields.Add(gen_field);
            }
        }

        static void DefineField(FieldInfoForGen gen_field)
        {
            FieldInfo field = gen_field.field_info;
            // Get and set
            {
	            AppendLine(2, "public {0} {1}", gen_field.name_type, gen_field.name_get);
	            AppendLine(2, "{");
	            if(field.m_type == FieldFormat.FieldType.Message || field.m_is_array)
	            {
	                AppendLine(3, "get {");
	                {
	                    AppendLine(4, "if ({0} == false) {{", gen_field.name_has_set);
	                    {
		                    AppendLine(5, "{0} = true;", gen_field.name_has_set);
		                    AppendLine(5, "{0} = new {1}();", gen_field.name_define, gen_field.name_type);
	                    }
	                    AppendLine(4, "}");
	                }
	                {
	                    AppendLine(4, "return {0};", gen_field.name_define);
	                }
	                AppendLine(3, "}");
	            }
	            else
	            {
	                AppendLine(3, "get {{ {0} = true; return {1}; }}", gen_field.name_has_set, gen_field.name_define);
	                AppendLine(3, "set {{ {0} = true; {1} = value; }}",gen_field.name_has_set, gen_field.name_define);
	            }
	            AppendLine(2, "}");
            }
            // Other
            {
                AppendLine(2, "public bool {0} {{ get{{ return {1}; }} }}", gen_field.name_get_has_set, gen_field.name_has_set);
                AppendLine(2, "private {0} {1};", gen_field.name_type, gen_field.name_define);
                AppendLine(2, "private bool {0};", gen_field.name_has_set);
                AppendLine(2, "private int {0};", gen_field.name_size);
                if(field.m_is_packed)
                {
                    AppendLine(2, "private int {0};", gen_field.name_packed_size);
                }
            }
        }

        static void GenMessageWriteTo(MessageInfo message)
        {
            AppendLine(2, "public void WriteTo(OutputStream output)");
            AppendLine(2, "{");
            {
                AppendLine(3, "if (_size == 0) CalculateSize();");
                AppendLine(3, "output.WriteLength(_inner_size);");
                foreach (var gen_field in cur_gen_fields)
                {
                    var field = gen_field.field_info;
                    AppendLine(3, "if ({0}) {{", gen_field.name_has_set);
                    if(field.m_is_array)
                    {
                        if(field.m_is_packed)
                        {
                            AppendLine(4, "output.WriteTag({0});", field.m_tag);
                            AppendLine(4, "output.WriteLength({0});", gen_field.name_packed_size);
                            AppendLine(4, "foreach (var _item in {0}) {{", gen_field.name_define);
                            gen_field.GenWriteCode(5, "_item");
                            AppendLine(4, "}");
                        }
                        else
                        {
                            AppendLine(4, "foreach (var _item in {0}) {{", gen_field.name_define);
                            AppendLine(5, "output.WriteTag({0});", field.m_tag);
                            gen_field.GenWriteCode(5, "_item");
                            AppendLine(4, "}");
                        }
                    }
                    else
                    {
                        gen_field.GenWriteCode(4);
                    }
                    AppendLine(3, "}");
                }
            }
            AppendLine(2, "}");
        }

        static void GenMessageReadFrom(MessageInfo message)
        {
            AppendLine(2, "public void ReadFrom(InputStream _input)");
            AppendLine(2, "{");
            {
                AppendLine(3, "var _end_pos = _input.Position + _input.ReadLength();");
                AppendLine(3, "while(_input.Position < _end_pos) {");
                {
                    AppendLine(4, "uint _tag = _input.ReadTag();");
                    AppendLine(4, "WireType _wire_type = WireFormat.GetTagWireType(_tag);");
                    AppendLine(4, "int _index = WireFormat.GetTagFieldNumber(_tag);");
                    AppendLine(4, "switch (_index) {");
                    foreach(var gen_field in cur_gen_fields)
                    {
                        var field = gen_field.field_info;
                        AppendLine(5, "case {0}:", field.m_index);
                        if(field.m_is_array)
                        {
                            if(field.m_is_packed)
                            {
                                AppendLine(6, "if (_wire_type == WireType.LengthDelimited) {");
                                {
	                                AppendLine(7, "int _len = _input.ReadLength();");
	                                AppendLine(7, "var _end_pos_arr = _input.Position + _len;");
	                                AppendLine(7, "while(_input.Position < _end_pos_arr) {");
                                    {
                                        gen_field.GenReadCode(8, "_item");
                                        AppendLine(8, "{0}.Add(_item);", gen_field.name_get);
                                    }
	                                AppendLine(7, "}");
                                }
                                AppendLine(6, "}");
                                AppendLine(6, "else { ");
                                {
                                    gen_field.GenReadCode(7, "_item");
                                    AppendLine(7, "{0}.Add(_item);", gen_field.name_get);
                                }
                                AppendLine(6, "}");
                            }
                            else
                            {
                                AppendLine(6, "{");
                                {
                                    gen_field.GenReadCode(7, "_item");
                                    AppendLine(7, "{0}.Add(_item)", gen_field.name_get);
                                }
                                AppendLine(6, "}");
                            }
                            AppendLine(6, "break;");
                        }
                        else
                        {
                            gen_field.GenReadCode(6);
                            AppendLine(6, "break;");
                        }
                    }
                    {
                        AppendLine(5, "default:");
                        AppendLine(6, "_input.SkipField(_wire_type);");
                        AppendLine(6, "break;");
                    }
                    AppendLine(4, "}");
                }
                AppendLine(3, "}");
            }
            AppendLine(2, "}");
        }

        static void GenMessageCalculateSize(MessageInfo message)
        {
            AppendLine(2, "public int CalculateSize()");
            AppendLine(2, "{");
            {
                AppendLine(3, "_inner_size = 0;");
                foreach (var gen_field in cur_gen_fields)
                {
                    var field = gen_field.field_info;
                    AppendLine(3, "if ({0}) {{", gen_field.name_has_set);
                    int tag_size = OutputStream.ComputeTagSize(field.m_tag);
                    if (field.m_is_array)
                    {
                        if (field.m_is_packed)
                        {
                            AppendLine(4, "{0} = 0;", gen_field.name_packed_size);
                            AppendLine(4, "foreach (var _item in {0}) {{", gen_field.name_define);
                            {
                                Append(5, "{0} += ", gen_field.name_packed_size);
                                gen_field.GenCalculateCodeSnippet("_item");
                                AppendLine();
                            }
                            AppendLine(4, "}");
                            AppendLine(4, "{0} = {1} + {2} + OutputStream.ComputeLengthSize({2});",
                                gen_field.name_size,
                                tag_size,
                                gen_field.name_packed_size);
                        }
                        else
                        {
                            AppendLine(4, "{0} = 0;", gen_field.name_size);
                            AppendLine(4, "foreach (var _item in {0}) {{", gen_field.name_define);
                            {
                                Append(5, "{0} += {1} + ", gen_field.name_size, tag_size);
                                gen_field.GenCalculateCodeSnippet("_item");
                                AppendLine();
                            }
                            AppendLine(4, "}");
                        }
                        AppendLine(4, "_inner_size += {0};", gen_field.name_size);
                    }
                    else
                    {
                        Append(4, "{0} = ", gen_field.name_size);
                        gen_field.GenCalculateCodeSnippet(gen_field.name_define);
                        AppendLine();
                        AppendLine(4, "_inner_size += {0} + {1};", tag_size, gen_field.name_size);
                    }
                    AppendLine(3, "}");
                }
                AppendLine(3, "_size = _inner_size + OutputStream.ComputeLengthSize(_inner_size);");
                AppendLine(3, "return _size;");
            }
            AppendLine(2, "}");
        }

        static void GenMessageGetSize(MessageInfo message)
        {
            AppendLine(2, "private int _inner_size = 0;");
            AppendLine(2, "private int _size = 0;");
            AppendLine(2, "public int GetSize() { return _size; }");
        }

        static string GetFieldTypeName(FieldInfo field_info)
        {
            var field_type = field_info.m_type;
            switch (field_type)
            {
                case FieldFormat.FieldType.InValid:
                    throw new NotSupportedException();
                case FieldFormat.FieldType.Int32:
                    return "int";
                case FieldFormat.FieldType.UInt32:
                    return "uint";
                case FieldFormat.FieldType.Int64:
                    return "long";
                case FieldFormat.FieldType.UInt64:
                    return "ulong";
                case FieldFormat.FieldType.Bool:
                    return "bool";
                case FieldFormat.FieldType.Enum:
                    return field_info.m_type_name;
                case FieldFormat.FieldType.SInt32:
                    return "int";
                case FieldFormat.FieldType.SInt64:
                    return "long";
                case FieldFormat.FieldType.String:
                    return "string";
                case FieldFormat.FieldType.Bytes:
                    return "byte[]";
                case FieldFormat.FieldType.Message:
                    return field_info.m_type_name;
                case FieldFormat.FieldType.Fixed64:
                    return "fixed64";
                case FieldFormat.FieldType.SFixed64:
                    return "sfixed64";
                case FieldFormat.FieldType.Double:
                    return "double";
                case FieldFormat.FieldType.Fixed32:
                    return "fixed32";
                case FieldFormat.FieldType.SFixed32:
                    return "sfixed32";
                case FieldFormat.FieldType.Float:
                    return "float";
                default:
                    throw new Exception();
            }
        }
    }
}
